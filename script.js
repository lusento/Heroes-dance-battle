/*          –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã            */

//–æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–≥—Ä—ã
const gameParameters = {
    MAX_LEVEL: 10, //–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥–µ—Ä–æ—è
    MAX_STAT: 55, //–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–µ—Ä–æ—è
    MIN_STAT: 10 //–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–º–µ—Ç–∫–∞ –¥–ª—è —É–º–µ–Ω–∏—è
  };
  
  //–æ–±—Ö–µ–∫—Ç –∫–ª–∞—Å—Å–æ–≤ –∏–≥—Ä—ã
  const gameClasses = {
    Mage: "–ú–∞–≥",
    Knight: "–†—ã—Ü–∞—Ä—å",
    Shooter: "–õ—É—á–Ω–∏–∫",
    Hero: "–ö–ª–∞—Å—Å"
  };
 
  //–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
  let enemyHero = null;
  
  //–æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞
  let playerHero = null;
  
  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
const sendToBattleButton = document.getElementById("sendToBattleButton");
  
//–¥–µ–π—Å—Ç–≤–∏–µ –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞
const doSkillButton = document.getElementById("doSkillButton");
//–¥–æ–±–∞–≤–ª—è–µ—Ç +random –∫–æ–ª-–≤–æ –∫ agi / str / int –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –∏–≥—Ä–æ–∫.
doSkillButton.onclick = () => {
  if (playerHero) {
    if (!playerHero.skillButtonClicked) {
      if (playerHero.constructor.name === "Mage") {
        playerHero.stats.int += getRandomValue(10, 35);
      } else if (playerHero.constructor.name === "Knight") {
        playerHero.stats.str += getRandomValue(10, 35);
      } else if (playerHero.constructor.name === "Archer") {
        playerHero.stats.agi += getRandomValue(10, 35);
      } else {
        console.error("–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!");
        return;
      }
      
      displayPlayerHero(playerHero);
      console.log(playerHero);

      playerHero.skillButtonClicked = true;
      doSkillButton.disabled = true;
    } else {
      console.error("–£–ø—Å! –ù–∞–≤—ã–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!");
    }
  } else {
    console.error("–£–ø—Å! –ì–µ—Ä–æ–π –∏–≥—Ä–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω!");
  }
};

function getRandomValue(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
  
  //–≤—ã–≤–æ–¥ –≥–µ—Ä–æ—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
  const getEnemyButton = document.getElementById("getEnemyButton");
  
  //–Ω–∞—á–∞–ª–æ –±–∏—Ç–≤—ã
  const startBattleButton = document.getElementById("startBattleButton");
  
  /*          –•–æ–¥ –∏–≥—Ä—ã            */
  
  //–≤—ã–≤–æ–¥ –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
  function displayPlayerHero(hero) {
  const playerHeroClassElement = document.getElementById("playerHeroClass");
  const playerHeroNameElement = document.getElementById("playerHeroName");
  const playerHeroLevelElement = document.getElementById("playerHeroLevel");
  const playerHeroHpElement = document.getElementById("playerHeroHp");
  const playerHeroStrengthElement = document.getElementById("playerHeroStrength");
  const playerHeroIntelligenceElement = document.getElementById("playerHeroIntelligence");
  const playerHeroAgilityElement = document.getElementById("playerHeroAgility");

  if (hero.level <= 10) {
    playerHeroClassElement.innerHTML = gameClasses[hero.constructor.name];
    playerHeroNameElement.innerHTML = hero.name;
    playerHeroLevelElement.innerHTML = hero.level;
    playerHeroHpElement.innerHTML = hero.healthPoints;
    playerHeroStrengthElement.innerHTML = hero.stats.str;
    playerHeroIntelligenceElement.innerHTML = hero.stats.int;
    playerHeroAgilityElement.innerHTML = hero.stats.agi;
    hero.displayHero();
  } else {
    playerHeroClassElement.innerHTML = "–û—à–∏–±–∫–∞: —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10!";
    playerHeroNameElement.innerHTML = "";
    playerHeroLevelElement.innerHTML = "";
    playerHeroHpElement.innerHTML = "";
    playerHeroStrengthElement.innerHTML = "";
    playerHeroIntelligenceElement.innerHTML = "";
    playerHeroAgilityElement.innerHTML = "";
  }
}
  
  //–≤—ã–≤–æ–¥ –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
  function displayEnemyHero(hero) {
    document.getElementById("enemyHeroClass").innerHTML =
      gameClasses[hero.constructor.name];
    document.getElementById("enemyHeroName").innerHTML = hero.name;
    document.getElementById("enemyHeroLevel").innerHTML = hero.level;
    document.getElementById("enemyHeroHp").innerHTML = hero.healthPoints;
    document.getElementById("enemyHeroStrength").innerHTML = hero.stats.str;
    document.getElementById("enemyHeroIntelligence").innerHTML = hero.stats.int;
    document.getElementById("enemyHeroAgility").innerHTML = hero.stats.agi;
  
    hero.displayHero();
  }

  //–≤—ã–≤–æ–¥ –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω
  function displayEnemyHero(hero) {
    document.getElementById("enemyHeroClass").innerHTML =
      gameClasses[hero.constructor.name];
    document.getElementById("enemyHeroName").innerHTML = hero.name;
    document.getElementById("enemyHeroLevel").innerHTML = hero.level;
    document.getElementById("enemyHeroHp").innerHTML = hero.healthPoints;
    document.getElementById("enemyHeroStrength").innerHTML = hero.stats.str;
    document.getElementById("enemyHeroIntelligence").innerHTML = hero.stats.int;
    document.getElementById("enemyHeroAgility").innerHTML = hero.stats.agi;
  
    hero.displayHero();
  }
  
  
  //–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥–µ—Ä–æ—è –∏–≥—Ä–æ–∫–∞
  sendToBattleButton.onclick = () => {
    const heroName = document.getElementById("name").value;
    if (heroName !== "") {
      const heroClass = document.querySelector(
        'input[name="class"]:checked'
      ).value;
      const heroLevel = document.getElementById("level").value;
      const heroStats = {};
  
      //–µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
      heroStats.str = Number(document.getElementById("strength").value);
      if (heroStats.str > gameParameters.MAX_STAT) {
        heroStats.str = gameParameters.MAX_STAT;
      }
      heroStats.int = Number(document.getElementById("intelligence").value);
      if (heroStats.int > gameParameters.MAX_STAT) {
        heroStats.int = gameParameters.MAX_STAT;
      }
      heroStats.agi = Number(document.getElementById("agility").value);
      if (heroStats.agi > gameParameters.MAX_STAT) {
        heroStats.agi = gameParameters.MAX_STAT;
      }
  
      const additionalAbility = document.querySelector(
        'input[name="additionalAbility"]:checked'
      ).value;
      const additionalStat = document.getElementById("additionalStat").value;
  if (heroClass === "Mage") {
        playerHero = new Mage(
          heroName,
          heroLevel,
          100,
          heroStats,
          additionalAbility,
          additionalStat
        );
      } else if (heroClass === "Knight") {
        playerHero = new Knight(
          heroName,
          heroLevel,
          100,
          heroStats,
          additionalAbility,
          additionalStat
        );
      } else if (heroClass === "Archer") {
        playerHero = new Archer(
          heroName,
          heroLevel,
          100,
          heroStats,
          additionalAbility,
          additionalStat
        );
      } else {
        console.error("–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞!");
        return;
      }
        
      displayPlayerHero(playerHero);
  
      getEnemyButton.removeAttribute("disabled");
      doSkillButton.removeAttribute("disabled");
    } else {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
    }
  };
  
  getEnemyButton.onclick = () => {
    //–ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ—Ä–æ—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    fetch(`https://api-code.practicum-team.ru/heroes`)
      .then((response) => response.json())
      .then((data) => {
        let randomEnemy = data[Math.floor(Math.random() * data.length)]; //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–µ—Ä–æ—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        console.log(randomEnemy); //–≤—ã–≤–æ–¥ –≥–µ—Ä–æ—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
  
        //—Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –≥–µ—Ä–æ—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        enemyHero = new Hero(
          randomEnemy.title, //–∏–º—è –≥–µ—Ä–æ—è
          Math.floor(Math.random() * 10) + 1, //—É—Ä–æ–≤–µ–Ω—å –≥–µ—Ä–æ—è
          randomEnemy.hp, //–∑–∞–ø–∞—Å —Å–∏–ª –≥–µ—Ä–æ—è
          {
            str: randomEnemy.str,
            int: randomEnemy.int,
            agi: randomEnemy.agi
          }
        ); //–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ—Ä–æ—è
  
        //–∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≥–µ—Ä–æ—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        displayEnemyHero(enemyHero);
  
        if (playerHero) {
          startBattleButton.removeAttribute("disabled");
        }
      })
      .catch((error) => console.error("–û—à–∏–±–∫–∞:", error));
  };

  
  function countStatsSum(hero) {
  let sum = 0;
  for (let stat in hero.stats) {
    sum += hero.stats[stat];
  }
  return sum;
}

function arena(firstHero, secondHero) {
  const winnerLabel = document.getElementById('winnerLabel');

  let winner = null;
  let fistHeroSum = countStatsSum(firstHero);
  let secondHeroSum = countStatsSum(secondHero);

  if (fistHeroSum > secondHeroSum) {
    winner = firstHero;
  } else if (fistHeroSum < secondHeroSum) {
    winner = secondHero;
  }

  if (winner) {
    winnerLabel.textContent = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: ${winner.name}`;
  } else {
    winnerLabel.textContent = "–í —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–æ–º –±–∞—Ç—Ç–ª–µ –ø–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞!";
  }

  setTimeout(() => {
    winnerLabel.textContent = "Heroes Dance Battle üíÉ";
  }, 6000);
}

startBattleButton.onclick = () => {
  if (playerHero && enemyHero) {
    arena(playerHero, enemyHero);
  }
};
